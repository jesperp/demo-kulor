import './PaletteColor.svelte.css.proxy.js';
/* src/PaletteColor.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	add_render_callback,
	attr,
	component_subscribe,
	create_in_transition,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	toggle_class
} from "../_snowpack/pkg/svelte/internal.js";

import { fade } from "../_snowpack/pkg/svelte/transition.js";
import { shades, store } from "./store.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (22:2) {#each shades as shade}
function create_each_block(ctx) {
	let div;
	let div_style_value;

	return {
		c() {
			div = element("div");
			attr(div, "class", "flex-grow shade");
			attr(div, "style", div_style_value = `background-color: hsl(${/*color*/ ctx[0].hue}, ${/*shade*/ ctx[5].saturation}%, ${/*shade*/ ctx[5].lightness}%);`);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*color*/ 1 && div_style_value !== (div_style_value = `background-color: hsl(${/*color*/ ctx[0].hue}, ${/*shade*/ ctx[5].saturation}%, ${/*shade*/ ctx[5].lightness}%);`)) {
				attr(div, "style", div_style_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let div_intro;
	let mounted;
	let dispose;
	let each_value = shades;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "flex flex-col flex-grow ring-0 ring-gray-100 ring-white svelte-1pgzx0a");
			toggle_class(div, "selected", /*selected*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*color, shades*/ 1) {
				each_value = shades;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*selected*/ 2) {
				toggle_class(div, "selected", /*selected*/ ctx[1]);
			}
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, fade, {});
					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let selected;
	let $palette;
	
	let { color } = $$props;
	const { palette } = store;
	component_subscribe($$self, palette, value => $$invalidate(3, $palette = value));

	const click_handler = () => {
		store.setSelected(color.id);
	};

	$$self.$$set = $$props => {
		if ("color" in $$props) $$invalidate(0, color = $$props.color);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$palette, color*/ 9) {
			$: $$invalidate(1, selected = $palette.selected === color.id);
		}
	};

	return [color, selected, palette, $palette, click_handler];
}

class PaletteColor extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { color: 0 });
	}
}

export default PaletteColor;