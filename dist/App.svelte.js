/* src/App.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	outro_and_destroy_block,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	update_keyed_each
} from "../_snowpack/pkg/svelte/internal.js";

import PaletteColor from "./PaletteColor.svelte.js";
import ColorPicker from "./ColorPicker.svelte.js";
import Export from "./Export.svelte.js";
import { store } from "./store.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (45:4) {:else}
function create_else_block(ctx) {
	let each_blocks = [];
	let each_1_lookup = new Map();
	let each_1_anchor;
	let current;
	let each_value = /*$palette*/ ctx[0].colors;
	const get_key = ctx => /*color*/ ctx[4].id;

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block(key, child_ctx));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*$palette*/ 1) {
				each_value = /*$palette*/ ctx[0].colors;
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, each_1_anchor.parentNode, outro_and_destroy_block, create_each_block, each_1_anchor, get_each_context);
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d(detaching);
			}

			if (detaching) detach(each_1_anchor);
		}
	};
}

// (37:4) {#if $palette.colors.length === 0 }
function create_if_block_1(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<p class="m-2 text-lg sm:-mt-20 sm:w-96">Kulör is an HSL based color scheme generator that exports to CSS and Tailwind.
          Add colors and play with the hue-slider!</p>`;

			attr(div, "class", "sm:flex sm:items-center sm:justify-center sm:flex-grow");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (47:6) {#each $palette.colors as color (color.id) }
function create_each_block(key_1, ctx) {
	let first;
	let palettecolor;
	let current;
	palettecolor = new PaletteColor({ props: { color: /*color*/ ctx[4] } });

	return {
		key: key_1,
		first: null,
		c() {
			first = empty();
			create_component(palettecolor.$$.fragment);
			this.first = first;
		},
		m(target, anchor) {
			insert(target, first, anchor);
			mount_component(palettecolor, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const palettecolor_changes = {};
			if (dirty & /*$palette*/ 1) palettecolor_changes.color = /*color*/ ctx[4];
			palettecolor.$set(palettecolor_changes);
		},
		i(local) {
			if (current) return;
			transition_in(palettecolor.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(palettecolor.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(first);
			destroy_component(palettecolor, detaching);
		}
	};
}

// (53:2) {#if $exportModal }
function create_if_block(ctx) {
	let export_1;
	let current;
	export_1 = new Export({});

	return {
		c() {
			create_component(export_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(export_1, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(export_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(export_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(export_1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let main;
	let section0;
	let h1;
	let t1;
	let button0;
	let t2;
	let button1;
	let t3;
	let div;
	let colorpicker;
	let t4;
	let section1;
	let current_block_type_index;
	let if_block0;
	let t5;
	let current;
	let mounted;
	let dispose;
	colorpicker = new ColorPicker({});
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*$palette*/ ctx[0].colors.length === 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*$exportModal*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			main = element("main");
			section0 = element("section");
			h1 = element("h1");
			h1.textContent = "Kulör";
			t1 = space();
			button0 = element("button");
			button0.innerHTML = `<svg width="28" height="28" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>`;
			t2 = space();
			button1 = element("button");
			button1.innerHTML = `<svg width="28" height="28" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"></path></svg>`;
			t3 = space();
			div = element("div");
			create_component(colorpicker.$$.fragment);
			t4 = space();
			section1 = element("section");
			if_block0.c();
			t5 = space();
			if (if_block1) if_block1.c();
			attr(h1, "class", "mb-2 text-2xl sm:text-3xl");
			attr(button0, "class", "mb-2");
			attr(button0, "title", "Add new color");
			attr(button1, "class", "mb-2");
			attr(button1, "title", "Show CSS/Tailwind config");
			attr(div, "class", "mb-2");
			attr(section0, "class", "flex flex-wrap items-center justify-center pb-2 space-x-2");
			attr(section1, "class", "flex h-full mx-1 space-x-1");
			attr(main, "class", "relative flex flex-col h-full p-4 text-white bg-gray-900");
		},
		m(target, anchor) {
			insert(target, main, anchor);
			append(main, section0);
			append(section0, h1);
			append(section0, t1);
			append(section0, button0);
			append(section0, t2);
			append(section0, button1);
			append(section0, t3);
			append(section0, div);
			mount_component(colorpicker, div, null);
			append(main, t4);
			append(main, section1);
			if_blocks[current_block_type_index].m(section1, null);
			append(main, t5);
			if (if_block1) if_block1.m(main, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(button0, "click", store.addColor),
					listen(button1, "click", store.showExport)
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(section1, null);
			}

			if (/*$exportModal*/ ctx[1]) {
				if (if_block1) {
					if (dirty & /*$exportModal*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(main, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(colorpicker.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(colorpicker.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(main);
			destroy_component(colorpicker);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $palette;
	let $exportModal;
	const { palette, exportModal } = store;
	component_subscribe($$self, palette, value => $$invalidate(0, $palette = value));
	component_subscribe($$self, exportModal, value => $$invalidate(1, $exportModal = value));
	return [$palette, $exportModal, palette, exportModal];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;