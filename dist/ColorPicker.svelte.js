/* src/ColorPicker.svelte generated by Svelte v3.32.1 */
import {
	SvelteComponent,
	action_destroyer,
	attr,
	component_subscribe,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} from "../_snowpack/pkg/svelte/internal.js";

import iro from "../_snowpack/pkg/@jaames/iro.js";
import { store, defaultHue } from "./store.js";

function create_fragment(ctx) {
	let div;
	let pickerAction_action;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "id", "hue-picker");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (!mounted) {
				dispose = action_destroyer(pickerAction_action = /*pickerAction*/ ctx[1].call(null, div));
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $selected;
	let picker;
	const { selected } = store;
	component_subscribe($$self, selected, value => $$invalidate(3, $selected = value));

	function colorChanged(color) {
		store.setCurrentHue(color.hue);
	}

	function pickerAction(node) {
		$$invalidate(2, picker = iro.ColorPicker(node, {
			color: `hsl(${defaultHue}, 50%, 100%)`,
			layoutDirection: "vertical",
			sliderSize: 24,
			handleRadius: 10,
			layout: [
				{
					component: iro.ui.Slider,
					options: { sliderType: "hue" }
				}
			]
		}));

		picker.on("color:change", colorChanged);

		return {
			destroy() {
				picker?.off("color:change", colorChanged); // No destroy for picker? 
				// https://github.com/jaames/iro.js/issues/157
			}, // No destroy for picker? 
			
		};
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selected, picker*/ 12) {
			$: {
				// When a new color is selected, update the picker to match selected hue
				const current = $selected;

				if (current !== undefined && picker) {
					picker.color.set(`hsl(${current.hue}, 50%, 100%)`);
				}
			}
		}
	};

	return [selected, pickerAction, picker, $selected];
}

class ColorPicker extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default ColorPicker;